//This is all taken from the tpi8101 datasheet: http://www.ti.com/lit/ds/symlink/tpic8101.pdf
//Table 3

//Create arrays of relevant sizes
var integratorTimeConstants = new Array(32);
var bandpassFrequencies = new Array(64);
var gainValues = new Array(64);

//Integrator time constant
integratorTimeConstants[0] = 40;
integratorTimeConstants[1] = 45;
integratorTimeConstants[2] = 50;
integratorTimeConstants[3] = 55;
integratorTimeConstants[4] = 60;
integratorTimeConstants[5] = 65;
integratorTimeConstants[6] = 70;
integratorTimeConstants[7] = 75;
integratorTimeConstants[8] = 80;
integratorTimeConstants[9] = 90;
integratorTimeConstants[10] = 100;
integratorTimeConstants[11] = 110;
integratorTimeConstants[12] = 120;
integratorTimeConstants[13] = 130;
integratorTimeConstants[14] = 140;
integratorTimeConstants[15] = 150;
integratorTimeConstants[16] = 160;
integratorTimeConstants[17] = 180;
integratorTimeConstants[18] = 200;
integratorTimeConstants[19] = 220;
integratorTimeConstants[20] = 240;
integratorTimeConstants[21] = 260;
integratorTimeConstants[22] = 280;
integratorTimeConstants[23] = 300;
integratorTimeConstants[24] = 320;
integratorTimeConstants[25] = 360;
integratorTimeConstants[26] = 400;
integratorTimeConstants[27] = 440;
integratorTimeConstants[28] = 480;
integratorTimeConstants[29] = 520;
integratorTimeConstants[30] = 560;
integratorTimeConstants[31] = 600;

bandpassFrequencies[0] = 1.22;
bandpassFrequencies[1] = 1.26;
bandpassFrequencies[2] = 1.31;
bandpassFrequencies[3] = 1.35;
bandpassFrequencies[4] = 1.4;
bandpassFrequencies[5] = 1.45;
bandpassFrequencies[6] = 1.51;
bandpassFrequencies[7] = 1.57;
bandpassFrequencies[8] = 1.63;
bandpassFrequencies[9] = 1.71;
bandpassFrequencies[10] = 1.78;
bandpassFrequencies[11] = 1.87;
bandpassFrequencies[12] = 1.96;
bandpassFrequencies[13] = 2.07;
bandpassFrequencies[14] = 2.18;
bandpassFrequencies[15] = 2.31;
bandpassFrequencies[16] = 2.46;
bandpassFrequencies[17] = 2.54;
bandpassFrequencies[18] = 2.62;
bandpassFrequencies[19] = 2.71;
bandpassFrequencies[20] = 2.81;
bandpassFrequencies[21] = 2.92;
bandpassFrequencies[22] = 3.03;
bandpassFrequencies[23] = 3.15;
bandpassFrequencies[24] = 3.28;
bandpassFrequencies[25] = 3.43;
bandpassFrequencies[26] = 3.59;
bandpassFrequencies[27] = 3.76;
bandpassFrequencies[28] = 3.95;
bandpassFrequencies[29] = 4.16;
bandpassFrequencies[30] = 4.39;
bandpassFrequencies[31] = 4.66;
bandpassFrequencies[32] = 4.95;
bandpassFrequencies[33] = 5.12;
bandpassFrequencies[34] = 5.29;
bandpassFrequencies[35] = 5.48;
bandpassFrequencies[36] = 5.68;
bandpassFrequencies[37] = 5.9;
bandpassFrequencies[38] = 6.12;
bandpassFrequencies[39] = 6.37;
bandpassFrequencies[40] = 6.64;
bandpassFrequencies[41] = 6.94;
bandpassFrequencies[42] = 7.27;
bandpassFrequencies[43] = 7.63;
bandpassFrequencies[44] = 8.02;
bandpassFrequencies[45] = 8.46;
bandpassFrequencies[46] = 8.95;
bandpassFrequencies[47] = 9.5;
bandpassFrequencies[48] = 10.12;
bandpassFrequencies[49] = 10.46;
bandpassFrequencies[50] = 10.83;
bandpassFrequencies[51] = 11.22;
bandpassFrequencies[52] = 11.65;
bandpassFrequencies[53] = 12.1;
bandpassFrequencies[54] = 12.6;
bandpassFrequencies[55] = 13.14;
bandpassFrequencies[56] = 13.72;
bandpassFrequencies[57] = 14.36;
bandpassFrequencies[58] = 15.07;
bandpassFrequencies[59] = 15.84;
bandpassFrequencies[60] = 16.71;
bandpassFrequencies[61] = 17.67;
bandpassFrequencies[62] = 18.76;
bandpassFrequencies[63] = 19.98;

gainValues[0] = 2;
gainValues[1] = 1.882;
gainValues[2] = 1.778;
gainValues[3] = 1.684;
gainValues[4] = 1.6;
gainValues[5] = 1.523;
gainValues[6] = 1.455;
gainValues[7] = 1.391;
gainValues[8] = 1.333;
gainValues[9] = 1.28;
gainValues[10] = 1.231;
gainValues[11] = 1.185;
gainValues[12] = 1.143;
gainValues[13] = 1.063;
gainValues[14] = 1;
gainValues[15] = 0.944;
gainValues[16] = 0.895;
gainValues[17] = 0.85;
gainValues[18] = 0.81;
gainValues[19] = 0.773;
gainValues[20] = 0.739;
gainValues[21] = 0.708;
gainValues[22] = 0.68;
gainValues[23] = 0.654;
gainValues[24] = 0.63;
gainValues[25] = 0.607;
gainValues[26] = 0.586;
gainValues[27] = 0.567;
gainValues[28] = 0.548;
gainValues[29] = 0.5;
gainValues[30] = 0.471;
gainValues[31] = 0.444;
gainValues[32] = 0.421;
gainValues[33] = 0.4;
gainValues[34] = 0.381;
gainValues[35] = 0.364;
gainValues[36] = 0.348;
gainValues[37] = 0.333;
gainValues[38] = 0.32;
gainValues[39] = 0.308;
gainValues[40] = 0.296;
gainValues[41] = 0.286;
gainValues[42] = 0.276;
gainValues[43] = 0.267;
gainValues[44] = 0.258;
gainValues[45] = 0.25;
gainValues[46] = 0.236;
gainValues[47] = 0.222;
gainValues[48] = 0.211;
gainValues[49] = 0.2;
gainValues[50] = 0.19;
gainValues[51] = 0.182;
gainValues[52] = 0.174;
gainValues[53] = 0.167;
gainValues[54] = 0.16;
gainValues[55] = 0.154;
gainValues[56] = 0.148;
gainValues[57] = 0.143;
gainValues[58] = 0.138;
gainValues[59] = 0.133;
gainValues[60] = 0.129;
gainValues[61] = 0.125;
gainValues[62] = 0.118;
gainValues[63] = 0.111;

//Function returns the index of the closest match to num in the given array
function closest(array, num)
{
    var i=0;
    var minDiff=1000;
    var ans, ansIndex;
    for(i in array){
         var m=Math.abs(num-array[i]);
         if(m<minDiff){ 
                minDiff=m; 
                ans=array[i];
                ansIndex = i;
            }
      }
    //return ans;
    return ansIndex;
}